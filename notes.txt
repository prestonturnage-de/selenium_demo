Their stack
  web app in angular
    (if you are the manager of a fleet, it tells you trouble codes, when they fueled,
    how much they fueled, where they fueled, list of all vehicles, devices installed)
    interfaces with DB managed by Syntech
    web app runs on installation, DB held by Syntech
    DB is microsoft SQL server
    System called FMLive (fuelmaster live)
  java stack running on fuel systems - apache felix (we think) os is yoctolinux
    java framework runs the app (apache felix)
    all software on the system is embedded java
    software on the installed hardware is written in C
  Probably largely using Python to write test and manage automated testing
  AutoFM - allows you to automatically control things like executing commands on the 
    embedded devices
    uses vehicle's OBD port to interface with the vehicle 
    pyserial library 
    hardware in the vehicle is called an AIM
  There is a serial out on the system you can use that gives you a login prompt
    you can also use a network connection to get to the shell
      you can check log messaages,
      manage the file system and write scripts
      gogo shell that allows you to execute fuelmaster commands that work with the 
      when you fuel up, the pump will communicate with the AIM and authorize fueling
      gogo shell lets you see the connected AIMS - status - VIM - ROM ID
      AIM syncs when you come in to radio range
  for FMLive
    there are API endpoints
    (ryan used postman, you can use requests)
  for the database:
    practice microsoft SQL server

Summary study:
  requests
  pyserial
  selenium
  paramiko - might not be 100% necessary if they are using Ryan's automation framework
  be familiar with python threading library because they use multithreading
  pyobdc - to connect to databases with python
  terminal skills:
    
  
Selenium and playwright - emulate web browser
  selenium uses a driver that can interface with the web browser
  (google selenium gecko for firefox)
  write python code to set up a session using the drive
Docker:
  first command in docker file:

Project:
  write selenium program in python
    it will open firefox (headless mode)
    go to a website
    run some tests
      (3 trivial tests)
    show that we understand docker, selenium,
    potentially deploy to AWS
    ci/cd will be:
      on pull request

  docker pull selenium/standalone-chrome:136.0-20250828
  docker run -d -p 4444:4444 -p 7900:7900 --shm-size="2g" selenium/docker run -d -p 4444:4444 -p 7900:7900 --shm-size="2g" selenium/standalone-chrome:latest

